// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef PANGEASDK_SWIFT_H
#define PANGEASDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import Mapbox;
@import ObjectiveC;
@import PangeaRenderer2;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PangeaSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol AnimatorDelegate;

/// Animator class that manages the layer animation.
SWIFT_CLASS("_TtC9PangeaSDK8Animator")
@interface Animator : NSObject
/// Weak reference to the AnimatorDelegate.
@property (nonatomic, weak) id <AnimatorDelegate> _Nullable delegate;
/// Start time
@property (nonatomic) double startTime;
/// End time
@property (nonatomic) NSTimeInterval endTime;
/// Current time
@property (nonatomic, readonly) double currentTime;
/// Update method that is controlled by a timer, used to set the time in the layer manager.
- (void)update;
/// Play the animation.
- (void)play;
/// Unpause the animation.
- (void)unPause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Time Mode
typedef SWIFT_ENUM(NSInteger, TimeMode, open) {
/// Relative
  TimeModeRelative = 0,
/// Static
  TimeModeStatic = 1,
};

/// Animator State
typedef SWIFT_ENUM(NSInteger, AnimatorState, open) {
/// Loading
  AnimatorStateLoading = 0,
/// Loaded
  AnimatorStateLoaded = 1,
/// Starting
  AnimatorStateStarting = 2,
/// Started
  AnimatorStateStarted = 3,
/// Stopping
  AnimatorStateStopping = 4,
/// Stopped
  AnimatorStateStopped = 5,
/// Paused
  AnimatorStatePaused = 6,
/// Waiting
  AnimatorStateWaiting = 7,
};


/// Animator delegate protocol
SWIFT_PROTOCOL("_TtP9PangeaSDK16AnimatorDelegate_")
@protocol AnimatorDelegate
@optional
/// State changed
- (void)stateChangedWithAnimator:(Animator * _Nonnull)animator state:(enum AnimatorState)state;
/// Time mode changed
- (void)timeModeChangedWithAnimator:(Animator * _Nonnull)animator timeMode:(enum TimeMode)timeMode;
/// Frame changing
- (void)frameChangingWithAnimator:(Animator * _Nonnull)animator previousFrame:(int64_t)previousFrame time:(double)time frame:(int64_t)frame;
/// Frame changed
- (void)frameChangedWithAnimator:(Animator * _Nonnull)animator time:(double)time frame:(int64_t)frame;
/// Frame count changed
- (void)frameCountChangedWithAnimator:(Animator * _Nonnull)animator frameCount:(int64_t)frameCount periodPerFrame:(int64_t)periodPerFrame;
/// Time changed
- (void)timeChangedWithAnimator:(Animator * _Nonnull)animator time:(double)time percentage:(double)percentage;
/// Start time changed
- (void)startTimeChangedWithAnimator:(Animator * _Nonnull)animator time:(double)time;
/// End time changed
- (void)endTimeChangedWithAnimator:(Animator * _Nonnull)animator time:(double)time;
/// Start and end time changed
- (void)timeRangeChangedWithAnimator:(Animator * _Nonnull)animator startTime:(double)startTime endTime:(double)endTime;
/// Play rate changed
- (void)playRateChangedWithAnimator:(Animator * _Nonnull)animator playRate:(int64_t)playRate;
/// Period per frame changed
- (void)periodPerFrameChangedWithAnimator:(Animator * _Nonnull)animator frameCount:(int64_t)frameCount periodPerFrame:(int64_t)periodPerFrame;
/// Dwell changed
- (void)dwellChangedWithAnimator:(Animator * _Nonnull)animator dwell:(int64_t)dwell;
/// Enable looping changed
- (void)enableLoopingChangedWithAnimator:(Animator * _Nonnull)animator enableLooping:(BOOL)enableLooping;
@end


SWIFT_CLASS("_TtC9PangeaSDK13BoundaryStyle")
@interface BoundaryStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines rules for visualizing a Choropleth layer.  One or more of these can be passed to an <code>FDSChoroplethLayer</code> instance to create the needed visual look on the map.
SWIFT_CLASS("_TtC9PangeaSDK22ChoroplethBoundaryRule")
@interface ChoroplethBoundaryRule : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This protocol should be implemented by objects that will be rendered to the map. All Pangea <code>Marker</code> and <code>Path</code> objects implement this protocol.
SWIFT_PROTOCOL("_TtP9PangeaSDK7Overlay_")
@protocol Overlay
/// The geographical point of this <code>Overlay</code> object.
@property (nonatomic) CLLocationCoordinate2D geoCenter;
/// Holds any type of data. Currently Pangea classes store a reference to their <code>Feature</code> counterparts.
@property (nonatomic) id _Nullable data;
/// minimum zoom level for this overlay to show up on the map.
@property (nonatomic) NSInteger minimumZoomLevel;
/// maximum(exclusive) zoom level for this overlay to show up on the map. Overlay will appear up to, but not including this value if this is set. If not set the overlay will show up at all zoom levels.
@property (nonatomic) NSInteger maximumZoomLevel;
@end

@class NSString;
@class NSPredicate;

/// This class is a default concrete implementation of the <code>Overlay</code> protocol.
SWIFT_CLASS("_TtC9PangeaSDK14DefaultOverlay")
@interface DefaultOverlay : NSObject <Overlay>
@property (nonatomic, copy) NSString * _Nonnull identifier;
@property (nonatomic) CLLocationCoordinate2D geoCenter;
@property (nonatomic) id _Nullable data;
/// minimum zoom level for this overlay to show up on the map. If not set the overlay will show up at all zoom levels.
@property (nonatomic) NSInteger minimumZoomLevel;
/// maximum(exclusive) zoom level for this overlay to show up on the map. Overlay will appear up to, but not including this value if this is set. If not set the overlay will show up at all zoom levels.
@property (nonatomic) NSInteger maximumZoomLevel;
/// Determines if the overlay is displayed on the map. Only the features that satisfy a condition of the predicate will be shown on the source layer.
@property (nonatomic, strong) NSPredicate * _Nullable predicate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TextStyle;

/// The <code>Marker</code> class indicates a single point on the map.
SWIFT_CLASS("_TtC9PangeaSDK6Marker")
@interface Marker : DefaultOverlay
/// a <code>TextStyle</code> object instance to describe how to display the text
@property (nonatomic, strong) TextStyle * _Nullable textStyle;
/// An optional text to display below the marker
@property (nonatomic, copy) NSString * _Nullable text;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// This class represents a circle on the map.
SWIFT_CLASS("_TtC9PangeaSDK12CircleMarker")
@interface CircleMarker : Marker
/// radius of the circle. Defaults to 5.0
@property (nonatomic) double radius;
/// Fill color of the circle, defaults to <code>UIColor.black</code>
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
/// Opacity of the fill. Defaults to 1.0
@property (nonatomic) CGFloat fillOpacity;
/// Blur of the fill. Defaults to 0.0
@property (nonatomic) CGFloat fillBlur;
/// Width of the circle stroke. Defaults to 1
@property (nonatomic) NSInteger strokeWidth;
/// Circle stroke color. Defaults to <code>UIColor.black</code>
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
/// Opacity of the stroke. Defaults to 1.0
@property (nonatomic) CGFloat strokeOpacity;
/// Default initializer of new CircleMarker.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new CircleMarker.
/// \param marker A circle marker.
///
- (nonnull instancetype)initWithMarker:(CircleMarker * _Nonnull)marker;
@property (nonatomic, readonly) NSUInteger hash;
@end


SWIFT_CLASS("_TtC9PangeaSDK20ParticleSystemObject")
@interface ParticleSystemObject : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK14ColorGenerator")
@interface ColorGenerator : ParticleSystemObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PangeaSDK12ColorUpdater")
@interface ColorUpdater : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK18DataColorAttribute")
@interface DataColorAttribute : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK17DataFadeAttribute")
@interface DataFadeAttribute : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK10DataHeader")
@interface DataHeader : ParticleSystemObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PangeaSDK25DataPastPositionAttribute")
@interface DataPastPositionAttribute : ParticleSystemObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PangeaSDK18DataScaleAttribute")
@interface DataScaleAttribute : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK24DataTemperatureAttribute")
@interface DataTemperatureAttribute : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK21DataVelocityAttribute")
@interface DataVelocityAttribute : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TileMetaData;
enum FeatureType : NSInteger;

/// The base class implementation of the <code>Feature</code> protocol. This class implements the Hashable
/// protocol as well to enable features to be used in dictionaries.
SWIFT_CLASS("_TtC9PangeaSDK14DefaultFeature")
@interface DefaultFeature : NSObject
@property (nonatomic, copy) NSString * _Nonnull featureID;
@property (nonatomic) double validTime;
@property (nonatomic) double backwardValidity;
@property (nonatomic) double forwardValidity;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull properties;
@property (nonatomic, strong) id <Overlay> _Nullable overlay;
@property (nonatomic) id _Nullable computed;
@property (nonatomic) CLLocationCoordinate2D geoCenter;
/// A String indicating the name of the geojson property representing the ID for a feature. Default is <code>id</code>.
@property (nonatomic, copy) NSString * _Nonnull idKey;
/// Initializes default feature
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new object with a GeoJSON info.
/// Returns nil if geoJson not valid.
- (nullable instancetype)initWithGeoJson:(NSDictionary<NSString *, id> * _Nonnull)geoJson featureIDKey:(NSString * _Nonnull)featureIDKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMetadata:(TileMetaData * _Nonnull)metadata size:(int32_t)size;
/// Takes in a GeoJSON object and sets the properties array, the type, and the properties array.
- (void)loadFromGeoJson:(NSDictionary<NSString *, id> * _Nonnull)json;
@property (nonatomic, readonly) NSUInteger hash;
/// Takes in GeoJSON and returns the type of feature from the FeatureType enumeration.
+ (enum FeatureType)getTypeFromGeoJson:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// This protocol defines the way to style feature objects in Pangea. Implement it on a class and pass it to the <code>FeatureStylePipeline</code> object or to the <code>FeatureLayer</code> object to customize feature styling.
SWIFT_PROTOCOL("_TtP9PangeaSDK13FeatureStyler_")
@protocol FeatureStyler
/// Styles the feature.  Implementers may return {@link Feature#getOverlay()} to reuse previous styles if not {@code null}.
/// @param feature       The feature to style.
/// @return The Overlay to use for rendering the feature.
- (id <Overlay> _Nullable)styleWithFeature:(DefaultFeature * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
@end


/// Default implementation of the FeatureStyler class. This class will create overlays with default
/// values to assist in putting items on the screen as fast as possible.
SWIFT_CLASS("_TtC9PangeaSDK20DefaultFeatureStyler")
@interface DefaultFeatureStyler : NSObject <FeatureStyler>
/// Style a given feature. If a feature already has an <code>Overlay</code> it will just be returned.
- (id <Overlay> _Nullable)styleWithFeature:(DefaultFeature * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC9PangeaSDK9Dimension")
@interface Dimension : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PangeaSDK15DurationUpdater")
@interface DurationUpdater : ParticleSystemObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PangeaSDK18EmissionRateHeader")
@interface EmissionRateHeader : ParticleSystemObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PangeaMapView;

/// Layer class - Base layer class.
SWIFT_CLASS("_TtC9PangeaSDK5Layer")
@interface Layer : NSObject
/// MapView
@property (nonatomic, weak) PangeaMapView * _Nullable mapView;
/// Layer ID
@property (nonatomic, readonly, copy) NSString * _Nonnull layerID;
/// Minimum zoom
@property (nonatomic) int32_t minimumZoom;
/// Maximum zoom
@property (nonatomic) int32_t maximumZoom;
/// Opacity
@property (nonatomic) CGFloat opacity;
/// Flag to determine if the layer shall be animated.
@property (nonatomic) BOOL isAnimated;
/// Current time.
@property (nonatomic) int64_t currentTime;
/// Initializes a new Layer object.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Load the layer. Should be overriden.
- (void)loadWithCompletionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
/// isEqual implementation that uses the hash value.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class FDSDataProvider;
@class FeatureValidator;
@class FeatureStylePipeline;

/// Feature layer class is the main way to put feature data onto the map. It takes in a <code>FDSDataProvider</code>
/// instance and interacts with it to get the feature data.
/// Once it gets the feature data from the data provider, it uses the <code>stylingPipeline</code> and <code>styler</code> objects to
/// style the data and adds it to the <code>mapView</code> instance that it holds.
SWIFT_CLASS("_TtC9PangeaSDK8FDSLayer")
@interface FDSLayer : Layer
@property (nonatomic, weak) PangeaMapView * _Nullable mapView;
/// The current layer time (timestamp in seconds).
/// Setting this will cause removing of the invalid features for the new layer time only if current time is changed but features processing isn’t triggered. Otherwise, this will cause reloading of the layer.
@property (nonatomic) int64_t currentTime;
/// The current instance of <code>FDSDataProvider</code> this layer is using. Value is read-only and passed in on the creation of the layer.
@property (nonatomic, readonly, strong) FDSDataProvider * _Nonnull featureDataProvider;
/// Indicates if the current <code>featureDataProvider</code> provides decluttering (<code>true</code> if it does; otherwise, <code>false</code>).
/// The default is <code>true</code>. The value is passed through from/to the <code>productInfo</code> of the current <code>featureDataProvider</code>.
/// note:
/// Use with caution! When set to <code>false</code>, requests to the server will include a <code>isDecluttered=false</code> flag and will request tile X=0,Y=0,LOD=0. For most cases, this will be too much data for the client.
@property (nonatomic) BOOL decluttered;
/// The current instance of the feature validator this layer is using to check the validity of the feature data.
/// May be overridden to modify the requirements for validity of the feature data.
@property (nonatomic, strong) FeatureValidator * _Nonnull featureValidator;
/// The current layer opacity represented by a value between <code>0.0</code> (fully transparent) and <code>1.0</code> (fully opaque). The default is <code>1.0</code>.
@property (nonatomic) CGFloat opacity;
/// The product key is the unique identifier used to acquire data for a specific product. Value is read-only and specified in the <code>FDSDataProvider</code> that was passed in on creation of this layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull productKey;
/// A class that implements the <code>FeatureStyler</code> protocol. This is called by the <code>stylingPipeline</code> object
/// to generate <code>Overlay</code> objects from the features for placement on the map.
/// Default is an instance of <code>DefaultFeatureStyler</code>. In most cases, it should be overridden by the client implementation that defines the visual representation of the feature objects on this layer (i.e. how they should look like).
@property (nonatomic, strong) id <FeatureStyler> _Nonnull styler;
/// An instance of the <code>FeatureStylePipleline</code> class that handles deciding what to style and initiates the styling.
@property (nonatomic, strong) FeatureStylePipeline * _Nonnull stylingPipeline;
/// When true the layer will animate when animator time changes. Setting this to true disables data provider filtering.
@property (nonatomic) BOOL isAnimated;
/// Loads feature data from the server and shows it on the map. This method will handle everything from loading meta data to loading tiles for the appropriate LOD. This is an async call that will call the completion handler with an error (if any) or with <code>nil</code> (if there were no errors when loading). If loading completes successfully, it reloads the data. If loading fails, it does not reload the data.
/// \param completionHandler The completion handler to call with the result after loading is finished. May be omitted, the default value is <code>nil</code>.
///
- (void)loadWithCompletionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
/// Redraws the layer. All features in the current layer are getting cleared (removed) and then drawn again (without loading anything from the server).
- (void)redraw;
@end


/// Feature layer class is the main way to put feature data onto the map. It takes in a <code>FDSDataProvider</code>
/// instance and interacts with it to get the feature data.
/// Once it gets the feature data from the data provider, it uses the <code>stylingPipeline</code> and <code>styler</code> objects to
/// style the data and adds it to the <code>mapView</code> instance that it holds.
SWIFT_CLASS("_TtC9PangeaSDK12FDSTileLayer")
@interface FDSTileLayer : FDSLayer
/// Number of items to hold in memory for this layer. The default is <code>1000</code>.
@property (nonatomic) NSInteger tileCacheCapacity;
/// The current layer opacity represented by a value between <code>0.0</code> (fully transparent) and <code>1.0</code> (fully opaque). The default is <code>1.0</code>.
@property (nonatomic) CGFloat opacity;
/// Creates a new instance of <code>FDSTileLayer</code> using the specified data provider.
/// This call will inialize the layer with a default <code>styler</code> object that should be overridden.
/// \param dataProvider An instance of <code>FDSDataProvider</code> that is used to get product information and features data to be displayed on this feature layer.
///
- (nonnull instancetype)init:(FDSDataProvider * _Nonnull)dataProvider OBJC_DESIGNATED_INITIALIZER;
/// Loads feature data from the server and shows it on the map. This method will handle everything from loading meta data to loading tiles for the appropriate LOD. This is an async call that will call the completion handler with an error (if any) or with <code>nil</code> (if there were no errors when loading). If loading completes successfully, it reloads the data. If loading fails, it does not reload the data.
/// \param completionHandler The completion handler to call with the result after loading is finished. May be omitted, the default value is <code>nil</code>.
///
- (void)loadWithCompletionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC9PangeaSDK18FDSChoroplethLayer")
@interface FDSChoroplethLayer : FDSTileLayer
@property (nonatomic) int64_t currentTime;
- (void)loadWithCompletionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
- (nonnull instancetype)init:(FDSDataProvider * _Nonnull)dataProvider OBJC_DESIGNATED_INITIALIZER;
@end


/// This is the base class that manages fetching and loading map tiles.
/// In most cases this class should be extended.
SWIFT_CLASS("_TtC9PangeaSDK15MapDataProvider")
@interface MapDataProvider : NSObject
/// ProductInfo expired and needs refreshing notification.
/// -note:
/// This will only fire if product is being used within a MapLayerDataProvider as its <code>productInfo</code>.
/// Product info doesn’t manage it’s <code>validity</code> neither <code>refreshRate</code> on its own.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull refreshProductNotificationName;)
+ (NSNotificationName _Nonnull)refreshProductNotificationName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull productInfoDidChangeNotification;)
+ (NSNotificationName _Nonnull)productInfoDidChangeNotification SWIFT_WARN_UNUSED_RESULT;
/// Product refresh rate. 0 will stop refreshing. When prodcut is updated productInfoDidChangeNotification will fire.
@property (nonatomic) NSTimeInterval refreshRate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtCC9PangeaSDK15MapDataProvider35ProductInfoNotificationUserInfoKeys")
@interface ProductInfoNotificationUserInfoKeys : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PangeaConfig;
@class FDSProductInfoProvider;

/// This is the class that manages fetching Feature data from the SSDS service.
SWIFT_CLASS("_TtC9PangeaSDK15FDSDataProvider")
@interface FDSDataProvider : MapDataProvider
/// Creates a new instance of <code>FDSDataProvider</code>
/// \param productKey The product key is used to acquire data for a specific product. May be an empty string (<code>""</code>) if no data is to be requested from the SSDS service (for example, when working with local data).
///
/// \param config Configuration object storing values needed to request data.
///
/// \param productInfoProvider An instance of the object used to manage retrieving the feature product information from network and cache. May be omitted, the default value is <code>shared</code> instance of the <code>FDSProductInfoProvider</code>.
///
- (nonnull instancetype)initWithProductKey:(NSString * _Nonnull)productKey config:(PangeaConfig * _Nonnull)config productInfoProvider:(FDSProductInfoProvider * _Nonnull)productInfoProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol FDSMVTLayerStylingDelegate;

/// FDSMVTLayer class is used for displaying feature data using the MVT (Mapbox Vector Tile) binary format.
SWIFT_CLASS("_TtC9PangeaSDK11FDSMVTLayer")
@interface FDSMVTLayer : FDSLayer
/// Layer delegate to be used for styling.
@property (nonatomic, weak) id <FDSMVTLayerStylingDelegate> _Nullable stylingDelegate;
/// Creates a new instance of <code>FDSMVTLayer</code> using the specified data provider.
/// \param dataProvider An instance of <code>FDSDataProvider</code> that is used to get product information and features data to be displayed on this MVT layer.
///
- (nonnull instancetype)init:(FDSDataProvider * _Nonnull)dataProvider OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) int64_t currentTime;
/// Loads data from the server and shows it on the map. This method will handle everything from loading meta data to loading tiles for the appropriate LOD. This is an async call that will call the completion handler with an error (if any) or with <code>nil</code> (if there were no errors when loading).
/// If the layer is removed from the map and added later, this method needs to be called again in order for data to appear on the map.
/// \param completionHandler The completion handler to call with the result after the get product info call is finished. May be omitted, the default value is <code>nil</code>.
///
- (void)loadWithCompletionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
@end


/// <code>FDSMVTLayerStylingDelegate</code> can be used by client apps to supply styling information for this MVT-based layer.
SWIFT_PROTOCOL("_TtP9PangeaSDK26FDSMVTLayerStylingDelegate_")
@protocol FDSMVTLayerStylingDelegate
/// Called after data is loaded.
- (void)style;
@end


SWIFT_CLASS("_TtC9PangeaSDK14FDSProductInfo")
@interface FDSProductInfo : NSObject
/// Use with caution! When set to false, requests to the server will include a <code>isDecluttered=false</code> flag and will request tile 0,0,0. For most cases this will be too much data for the client.
@property (nonatomic) BOOL decluttered;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FDSProductInfo (SWIFT_EXTENSION(PangeaSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC9PangeaSDK22FDSProductInfoProvider")
@interface FDSProductInfoProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FDSProductInfoProvider * _Nonnull shared;)
+ (FDSProductInfoProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithRegionName:(NSString * _Nonnull)regionName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK18FDSProductMetaData")
@interface FDSProductMetaData : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultTileWidth;)
+ (NSInteger)defaultTileWidth SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultTileHeight;)
+ (NSInteger)defaultTileHeight SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC9PangeaSDK26FDSProductMetaDataProperty")
@interface FDSProductMetaDataProperty : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC9PangeaSDK11FadeUpdater")
@interface FadeUpdater : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is responsible for driving the styling of features via a <code>FeatureStyler</code> object. It will determine if a feature should be styled through the <code>filterBlock</code> property, in what ordeer they should be styled via the <code>sortBlock</code> property, and then initiate the actual styling.
SWIFT_CLASS("_TtC9PangeaSDK20FeatureStylePipeline")
@interface FeatureStylePipeline : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Feature type
typedef SWIFT_ENUM(NSInteger, FeatureType, open) {
/// None
  FeatureTypeNone = 0,
/// Point
  FeatureTypePoint = 1,
/// Polyline
  FeatureTypePolyline = 2,
/// Polygon
  FeatureTypePolygon = 3,
/// MultiPolygon
  FeatureTypeMultiPolygon = 4,
/// MultiPolyline
  FeatureTypeMultiPolyline = 5,
};


/// This class is used by the the <code>FDSTileLayer</code> class to enforce validity requirements on feature data coming back from a server call.
SWIFT_CLASS("_TtC9PangeaSDK16FeatureValidator")
@interface FeatureValidator : NSObject
/// Initializes feature validator
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class Icon;
@class StylerHelper;

/// Representation of the interior look for <code>PolygonPath</code> overlay
SWIFT_CLASS("_TtC9PangeaSDK9FillStyle")
@interface FillStyle : NSObject
/// The opacity of the fill, defaults to 1.0
@property (nonatomic) CGFloat fillOpacity;
/// The color of the fill, defaults to UIColor.clear.
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
/// An icon that can be used to fill with a pattern.
@property (nonatomic, strong) Icon * _Nonnull fillPattern;
/// The fill color properties
@property (nonatomic, strong) StylerHelper * _Nonnull fillColorProp;
/// The fill opacity properties
@property (nonatomic, strong) StylerHelper * _Nonnull fillOpacityProp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK39FollowCameraViewClippingRegionAttribute")
@interface FollowCameraViewClippingRegionAttribute : ParticleSystemObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PangeaSDK22FollowCameraViewHeader")
@interface FollowCameraViewHeader : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Helper class that represents a lat/long bounding box with top right(NE) and bottom left(SW) corners.
SWIFT_CLASS("_TtC9PangeaSDK14GeoBoundingBox")
@interface GeoBoundingBox : NSObject
/// Coordinates for northeast corner
@property (nonatomic) CLLocationCoordinate2D northEast;
/// Coordinates for northwest corner
@property (nonatomic) CLLocationCoordinate2D southWest;
/// Initializes a new GeoBoundingBox object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new GeoBoundingBox object.
/// \param northEast Coordinates of northeast corner
///
/// \param southWest Coordinates of southwest corner
///
- (nonnull instancetype)initWithNorthEast:(CLLocationCoordinate2D)northEast southWest:(CLLocationCoordinate2D)southWest OBJC_DESIGNATED_INITIALIZER;
/// Returns true if the passed in coordinate is in the bounding box. This does not currently account for the IDL.
- (BOOL)containsWithCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Find the center of the box.
/// @return the LatLng of the center of the box.
- (CLLocationCoordinate2D)getCenter SWIFT_WARN_UNUSED_RESULT;
/// Get the height of the box (north latitude - south latitude).  This is always >= 0.
/// @return box height, a non-negative number.
- (double)getHeight SWIFT_WARN_UNUSED_RESULT;
/// Does the box contain the point.  This includes the boundaries and corners of the box.
/// @param point the point to check
/// @return true if the point is ‘in’ (or ‘on’) the box.  False if the point is strictly outside the box.
- (double)getWidth SWIFT_WARN_UNUSED_RESULT;
/// Determines if the other <code>GeoBoundingBox</code> for being contained.
/// \param bound The bounds to check and see if it is being contained.
///
- (BOOL)contains:(GeoBoundingBox * _Nonnull)bounds SWIFT_WARN_UNUSED_RESULT;
/// Determines if the other <code>GeoBoundingBox</code> intersects with this bounds.
/// \param bound The bounds to check and see if it intersects with this bounds.
///
- (BOOL)intersects:(GeoBoundingBox * _Nonnull)bounds SWIFT_WARN_UNUSED_RESULT;
/// Splits this bounds into multiple bounds where each one does not cross the international date line.
/// The combined polygons cover the same area as this bounds.
/// @return One or more bounds that cover the same area but do not cross the international date line.
- (NSArray<GeoBoundingBox *> * _Nonnull)splitAtDateLine SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// This class contains the set of coordinates and LODs that are needed for an offline region.
SWIFT_CLASS("_TtC9PangeaSDK9GeoRegion")
@interface GeoRegion : NSObject
/// Create a new instance of this <code>GeoRegion</code>.
- (nonnull instancetype)initWithBoundingBox:(GeoBoundingBox * _Nonnull)boundingBox lods:(NSArray<NSNumber *> * _Nonnull)lods OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TilerDataProvider;
@class PangeaPalette;

/// Grid layer is a class that uses Pangea Renderer v2 and draws data by means of client-side rendering.
/// It is using <code>TilerDataProvider</code> and able to get data from Tiler or Tiler Extras service.
SWIFT_CLASS("_TtC9PangeaSDK9GridLayer")
@interface GridLayer : Layer
/// The current layer time (timestamp in seconds). Setting this will reload the layer only if the value is greater than <code>0</code>.
@property (nonatomic) int64_t currentTime;
/// Current instance of <code>TilerDataProvider</code> this layer is using. Read-only.
@property (nonatomic, readonly, strong) TilerDataProvider * _Nonnull tilerDataProvider;
/// The current layer opacity represented by a value between <code>0.0</code> (fully transparent) and <code>1.0</code> (fully opaque). The default value is <code>1.0</code>. Setting this will reload the layer.
@property (nonatomic) CGFloat opacity;
/// The product key is used to acquire data for a specific product. Value is read-only and specified in the <code>TilerDataProvider</code> that was passed in on creation of this layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull productKey;
/// Maximum zoom level.
/// It is not allowed to set this value greater than <code>13</code> (attempt to do so will limit this to <code>13</code>). The reason for this is that all products that get palletized for Tiler Server max at this level.
@property (nonatomic) int32_t maximumZoom;
/// Creates a new instance of <code>GridLayer</code> using the specified data provider.
/// \param dataProvider An instance of <code>TilerDataProvider</code> that is used to get product information and tiles data to be displayed on this grid layer. May use <code>tiler</code> or <code>tiler-extras</code> SSDS endpoint as the source of data.
///
/// \param rendererLayerCapacity Maximum number of tiles that the renderer layer will support. This is the capacity of the renderer layer’s internal LRU cache for tiles. Once the number of tiles in the layer exceeds capacity, the least recently used tile is being evicted from the layer. May be omitted, the default value is <code>64</code>. <em>Note:</em> This value impacts the layer’s performance and behavior.
///
/// \param palette The color palette to be applied when displaying data on the layer. May be omitted, the default value is <code>nil</code>.
///
- (nullable instancetype)initWithDataProvider:(TilerDataProvider * _Nonnull)dataProvider rendererLayerCapacity:(NSInteger)rendererLayerCapacity palette:(PangeaPalette * _Nullable)palette OBJC_DESIGNATED_INITIALIZER;
/// Loads data from the server and shows it on the map. This is an async call that will call the completion handler with an error (if any) or with <code>nil</code> (if there were no errors when loading). If loading completes successfully, it reloads the data. If loading fails, it does not reload the data.
/// \param completionHandler The completion handler to call with the result after loading is finished. May be omitted, the default value is <code>nil</code>.
///
- (void)loadWithCompletionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
/// Reloads the layer data. This can be called in response to panning/zooming. Unlike the <code>load(completionHandler:)</code> method this will not update product information. This is an async call.
- (void)reloadData;
@end

@class UIImage;

/// A helper structure that holds an image with its name and an offset. Used in the IconMarker class.
SWIFT_CLASS("_TtC9PangeaSDK4Icon")
@interface Icon : NSObject
/// The UIImage object being used by this icon struct.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The offset from the anchor of the image.
/// The name used to reference this icon throughout the SDK.
@property (nonatomic, copy) NSString * _Nonnull imageName;
/// Initializes a new icon.
/// \param imageName Image name.
///
- (nonnull instancetype)initWithImageName:(NSString * _Nonnull)imageName OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new icon.
/// \param image UIImage.
///
/// \param offset Offset.
///
/// \param imageName Image name.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image imageName:(NSString * _Nonnull)imageName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Icon anchor
typedef SWIFT_ENUM(NSInteger, IconAnchor, open) {
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  IconAnchorCenter = 1,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  IconAnchorLeft = 2,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  IconAnchorRight = 3,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  IconAnchorTop = 4,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  IconAnchorBottom = 5,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  IconAnchorTopLeft = 6,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  IconAnchorTopRight = 7,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  IconAnchorBottomLeft = 8,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  IconAnchorBottomRight = 9,
};


/// This class represents an image on the map with an optional offset.
SWIFT_CLASS("_TtC9PangeaSDK10IconMarker")
@interface IconMarker : Marker
/// The <code>Icon</code> struct instance to hold the image and its offset.
@property (nonatomic, strong) Icon * _Nonnull icon;
/// Initializes icon marker
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The tint color to paint the icon marker with. Default is clear.
@property (nonatomic, strong) UIColor * _Nonnull iconColor;
/// The color of the icon marker halo. Default is clear.
@property (nonatomic, strong) UIColor * _Nonnull iconHaloColor;
/// Fade out the icon halo toward the outside.
@property (nonatomic) double iconHaloBlur;
/// Offset distance of the icon from its anchor. Measured in CGVector.
@property (nonatomic) CGVector iconOffset;
/// How wide of a halo to give the icon.
@property (nonatomic) double iconHaloWidth;
/// Opacity to give the icon.
@property (nonatomic) CGFloat iconOpacity;
/// Icon rotation - default 0.0
@property (nonatomic) double iconRotation;
/// If true, the icon will be visible even if it collides with other previously
/// drawn symbols.
@property (nonatomic) BOOL iconAllowsOverlap;
/// If true, other symbols can be visible even if they collide with the icon.
@property (nonatomic) BOOL iconIgnoresPlacement;
/// Part of the icon placed closest to the anchor.
@property (nonatomic) enum IconAnchor iconAnchor;
/// Scales the icon in this marker.
@property (nonatomic) double iconScale;
@end


/// This class adjusts and corrects points regarding to International Data Line
SWIFT_CLASS("_TtC9PangeaSDK29InternationalDateLineAdjuster")
@interface InternationalDateLineAdjuster : NSObject
/// Initializes a new IDL adjuster.
///
/// returns:
/// A new IDL adjuster.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new IDL adjuster.
/// \param tolerance Tolerance in degrees.
///
///
/// returns:
/// A new IDL adjuster.
- (nonnull instancetype)initWithTolerance:(double)tolerance OBJC_DESIGNATED_INITIALIZER;
/// Adjusts the longitude on the points to indicate how the shape defined by the points should cross the IDL.
- (NSArray<NSValue *> * _Nonnull)adjustWithGeoPoints:(NSArray<NSValue *> * _Nonnull)geoPoints SWIFT_WARN_UNUSED_RESULT;
@end



/// LayerManager class - Handles adding & deleting layers plus setting the time on all layers.
SWIFT_CLASS("_TtC9PangeaSDK12LayerManager")
@interface LayerManager : NSObject
/// Init new instance of <code>LayerManager</code> and observe any notifications
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Adds a placeholder layer into the Pangea layer stack to mirror the Mapbox structure to allow client apps to insert layers above/below map box layers(e.g. above/below roads).
/// WARNING: If the layer name passed in is not available in the selected Mapbox style the behavior is undefined.
- (void)addCustomMapboxLayerPlaceholder:(NSString * _Nonnull)layerID;
@end


SWIFT_CLASS("_TtC9PangeaSDK12LineRenderer")
@interface LineRenderer : ParticleSystemObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelInfo = 3,
  LogLevelDebug = 2,
  LogLevelError = 1,
  LogLevelNone = 0,
};




/// This class represents an object on the map that consists of multiple lat/long points. This is the parent class of both <code>Polygon</code> and <code>Polyline</code> and should not be used directly.
SWIFT_CLASS("_TtC9PangeaSDK10MultiPoint")
@interface MultiPoint : NSObject
/// Array of CLLocationCoordinate2D points representing the MultiPoint. If you add/remove items from this array, make sure to call <code>recalculateBounds</code>
@property (nonatomic, copy) NSArray<NSValue *> * _Nonnull points;
/// The bounding box for the polygon.
@property (nonatomic, strong) GeoBoundingBox * _Nonnull bounds;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Polygon;

/// Feature class that takes in GeoJSON representing a multipolygon geometry and generates an array of Polygon objects to represent it.
SWIFT_CLASS("_TtC9PangeaSDK19MultiPolygonFeature")
@interface MultiPolygonFeature : DefaultFeature
/// Polygons
@property (nonatomic, copy) NSArray<Polygon *> * _Nullable polygons;
/// Initializes a new Multi-Polygon Feature object.
///
/// returns:
/// A new Multi-Polygon Feature object
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new Multi-Polygon Feature object with GeoJSON object and uses it to populate the polygons and properties arrays.
/// Returns nil if geoJson not valid.
- (nullable instancetype)initWithGeoJson:(NSDictionary<NSString *, id> * _Nonnull)geoJson featureIDKey:(NSString * _Nonnull)featureIDKey OBJC_DESIGNATED_INITIALIZER;
/// takes in a GeoJSON object and uses it to populate the polygons and properties arrays.
- (void)loadFromGeoJson:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Debug description
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class Polyline;

SWIFT_CLASS("_TtC9PangeaSDK20MultiPolylineFeature")
@interface MultiPolylineFeature : DefaultFeature
/// Polylines
@property (nonatomic, copy) NSArray<Polyline *> * _Nullable polylines;
/// Initializes a new Multi-Polyline Feature object.
///
/// returns:
/// A new Multi-Polyline Feature object
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new Multi-Polyline Feature object with GeoJSON object and uses it to populate the polygons and properties arrays.
/// Returns nil if geoJson not valid.
- (nullable instancetype)initWithGeoJson:(NSDictionary<NSString *, id> * _Nonnull)geoJson featureIDKey:(NSString * _Nonnull)featureIDKey OBJC_DESIGNATED_INITIALIZER;
/// takes in a GeoJSON object and uses it to populate the polygons and properties arrays.
- (void)loadFromGeoJson:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Debug description
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class StrokeStyle;

/// Base class holding visual properties that are common for rendering <code>Polygon</code> and <code>Polyline</code> objects.
SWIFT_CLASS("_TtC9PangeaSDK4Path")
@interface Path : DefaultOverlay
@property (nonatomic, strong) StrokeStyle * _Nonnull strokeStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK17MultiPolylinePath")
@interface MultiPolylinePath : Path
/// Initializes a new MultiPolylinePath
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The <code>Polyline</code> objects represented by the class. Defaults to an empty array.
@property (nonatomic, copy) NSArray<Polyline *> * _Nonnull polylines;
@end


/// This class manages all network operations.
SWIFT_CLASS("_TtC9PangeaSDK14NetworkManager")
@interface NetworkManager : NSObject
/// Initializes a new NetworkManager class.
///
/// returns:
/// A NetworkManager object
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class handled each individual network operation.
SWIFT_CLASS("_TtC9PangeaSDK16NetworkOperation")
@interface NetworkOperation : NSOperation
/// Is the operation executing.
///
/// returns:
/// True if executing
@property (nonatomic, getter=isExecuting) BOOL executing;
/// Is the operation finished.
///
/// returns:
/// True if finished
@property (nonatomic, getter=isFinished) BOOL finished;
/// Start the operation.
- (void)start;
/// Cancel the operation including the active network task.
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ProductType : NSInteger;

/// This class defines a product name and type to pass to Pangea for an offline region request.
SWIFT_CLASS("_TtC9PangeaSDK14OfflineProduct")
@interface OfflineProduct : NSObject
/// Create a new instance of <code>OfflineProduct</code>.
- (nonnull instancetype)initWithProductType:(enum ProductType)productType productName:(NSString * _Nonnull)productName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum Stencil : NSInteger;

/// <code>OfflineRegionRequest</code> is the class for client apps to use to download data for usage offline.
SWIFT_CLASS("_TtC9PangeaSDK20OfflineRegionRequest")
@interface OfflineRegionRequest : NSObject
/// The name of this region request. This is the name used when deleting, cancelling, or asking about region status.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Create a new <code>OfflineRegionRequest</code> instance.
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name fromTime:(int64_t)fromTime toTime:(int64_t)toTime geoRegions:(NSArray<GeoRegion *> * _Nonnull)geoRegions offlineProducts:(NSArray<OfflineProduct *> * _Nonnull)offlineProducts stencil:(enum Stencil)stencil;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Current offline region request’s status.
typedef SWIFT_ENUM(NSInteger, OfflineRegionStatus, open) {
/// Request wasn’t started in PangeaOfflineManager.
  OfflineRegionStatusUnknown = 0,
/// Preparing request.
  OfflineRegionStatusBuildingRequest = 1,
/// Sending initial request for data preparation.
  OfflineRegionStatusGettingPackageId = 2,
/// Reqeusts was initiated and waiting for server to create a package.
  OfflineRegionStatusWaitingForServer = 3,
/// Downloading package with data.
  OfflineRegionStatusDownloading = 4,
/// Unpacking data from downloaded package and saving its content.
  OfflineRegionStatusUnpacking = 5,
/// Request was completed or failed with an error.
  OfflineRegionStatusCompleted = 6,
};



/// Allows an array of several Overlays to be used in the same way as a single <code>Overlay</code>.
SWIFT_CLASS("_TtC9PangeaSDK12OverlayGroup")
@interface OverlayGroup : DefaultOverlay
/// The array of <code>Overlay</code> objects that make up this <code>OverlayGroup</code>.
@property (nonatomic, copy) NSArray<id <Overlay>> * _Nonnull overlays;
/// Initializes a new OverlayGroup object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSArray<id <Overlay>> * _Nonnull)overlays OBJC_DESIGNATED_INITIALIZER;
@end


/// PangeaConfig class - Utility class for storing shared configuration values.
SWIFT_CLASS("_TtC9PangeaSDK12PangeaConfig")
@interface PangeaConfig : NSObject
/// The api key
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// Are we using the QA environment
@property (nonatomic) BOOL isQAEnvironment;
/// Specified language
@property (nonatomic, copy) NSString * _Nonnull language;
/// Specified level for log message you want to observe
@property (nonatomic) enum LogLevel logLevel;
/// If url sharding false urls will made with <code>api1</code>, with true urls will have random numbers
@property (nonatomic) BOOL isShardingEnabled;
/// Tessera member key.
@property (nonatomic, copy) NSString * _Nonnull tesseraMemberKey;
/// Tessera map key.
@property (nonatomic, copy) NSString * _Nonnull tesseraMapKey;
/// Tessera base URL.
@property (nonatomic, copy) NSString * _Nonnull tesseraBaseUrl;
/// Product set key for parsing the product set from the API response.
@property (nonatomic, copy) NSString * _Nonnull productSet;
/// Initializes a new PangeaConfig object.
///
/// returns:
/// A PangeaConfig object
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Pangea map delegate protocol
SWIFT_PROTOCOL("_TtP9PangeaSDK17PangeaMapDelegate_")
@protocol PangeaMapDelegate <NSObject, AnimatorDelegate>
@optional
/// On map region changed
- (void)onMapRegionChanged:(MGLCoordinateBounds)screenCoordBounds lod:(NSInteger)lod SWIFT_DEPRECATED_MSG("use onMapRegionDidChange(_ screenCoordBounds: GeoBoundingBox, lod: Int)");
/// On map region changed
- (void)onMapRegionDidChange:(GeoBoundingBox * _Nonnull)screenCoordBounds lod:(NSInteger)lod;
/// On map view can animate
- (void)onMapViewCanAnimate;
@end

@class NSCoder;
@class MGLUserLocationAnnotationViewStyle;
@class MGLStyle;
@protocol MGLAnnotation;
@class MGLAnnotationImage;
@class MGLShape;
@class MGLPolyline;
@class MGLPolygon;
@protocol MGLCalloutView;
@class MGLAnnotationView;
@class NSURL;

/// PangeaMapView - This is the main class for using the PangeaSDK.
/// This class handles the display and general behavior of the map.
SWIFT_CLASS("_TtC9PangeaSDK13PangeaMapView")
@interface PangeaMapView : MGLMapView <MGLMapViewDelegate>
/// The specified style string.
@property (nonatomic, copy) NSString * _Nonnull styleString;
/// The identifier of road layer
@property (nonatomic, readonly, copy) NSString * _Nonnull mapBoxBaseLayerID;
/// The reference to the animator
@property (nonatomic, readonly, strong) Animator * _Nullable animator;
/// The reference to the animator
@property (nonatomic, readonly, strong) LayerManager * _Nullable layerManager;
/// Overriden delegate property.
@property (nonatomic, weak) IBOutlet id <MGLMapViewDelegate> _Nullable delegate;
/// The animation loading timeout value
@property (nonatomic) double animationLoadingTimeout;
/// Returns true once the map is finished loading.
@property (nonatomic) BOOL isLoaded;
/// Initializes a new map view with a specified frame.
/// \param frame The frame of the map
///
///
/// returns:
/// A PangeMapView with specified frame size
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new map view with a coder.
/// \param coder The coder
///
///
/// returns:
/// A PangeMapView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initialize the map with the account access token. This is the map box access token. This method must be called before any other map-related method(immediately after <code>init</code>).
- (void)setMapAccessToken:(NSString * _Nonnull)token;
/// Reset layers
- (void)resetLayers;
/// Inserts the passed in <code>layer</code> below the Mapbox placeholder layer specified by <code>mapboxLayerID</code>. If a placeholder layer hasn’t been created it will call the <code>addCustomMapboxLayerPlaceholder</code> method of the <code>LayerManager</code> and add it.
/// WARNING: If the layer name passed in is not available in the selected Mapbox style the behavior is undefined.
- (void)insertLayerBelowMapboxLayerWithLayer:(Layer * _Nonnull)layer mapboxLayerID:(NSString * _Nonnull)mapboxLayerID;
/// Insert layer above another layer
- (BOOL)insertLayer:(Layer * _Nonnull)layer above:(Layer * _Nonnull)aboveLayer;
/// Add layer
- (BOOL)addLayer:(Layer * _Nonnull)layer;
/// Insert layer below another layer
- (BOOL)insertLayer:(Layer * _Nonnull)layer below:(Layer * _Nonnull)belowLayer;
/// Insert layer
- (BOOL)insertLayer:(Layer * _Nonnull)layer belowLayerName:(NSString * _Nullable)belowLayerName;
/// Removes <code>layer</code> from the map. For feature layers all features will be removed from the map. For MVT layers, the layer will also be disconnected from the map updates.
- (void)removeLayer:(Layer * _Nonnull)layer;
/// Delegate method called by the underlying map view once the user is done panning/zooming.
- (void)mapView:(MGLMapView * _Nonnull)mapView regionDidChangeAnimated:(BOOL)animated;
/// Delegate method called to customize the look of the user annotation on the map
- (MGLUserLocationAnnotationViewStyle * _Nonnull)mapViewStyleForDefaultUserLocationAnnotationView:(MGLMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
/// Map view style is finished loading(MBL delegate method).
- (void)mapView:(MGLMapView * _Nonnull)mapView didFinishLoadingStyle:(MGLStyle * _Nonnull)style;
/// Delegate method called by the underlying map view when it is about to start loading.
- (void)mapViewWillStartLoadingMap:(MGLMapView * _Nonnull)mapView;
/// Delegate method called by the underlying map view when it is finished loading. No map related operations should be done before this method is called as the side effects will be undefined.
- (void)mapViewDidFinishLoadingMap:(MGLMapView * _Nonnull)mapView;
/// Delegate method that returns a Map box image object for the passed in annotation. Currently a direct passthrough from Map box to the client app.
- (MGLAnnotationImage * _Nullable)mapView:(MGLMapView * _Nonnull)mapView imageForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to set the alpha for the passed in shape annotation. Currently a direct passthrough from Map box to the client app. If the client app doesn’t define the method it will return 1.0 by default.
- (CGFloat)mapView:(MGLMapView * _Nonnull)mapView alphaForShapeAnnotation:(MGLShape * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to set the width for the passed in polyline annotation. Currently a direct passthrough from Map box to the client app. If the client app doesn’t define the method it will return 3.0 by default.
- (CGFloat)mapView:(MGLMapView * _Nonnull)mapView lineWidthForPolylineAnnotation:(MGLPolyline * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to set the stroke color for the passed in shape annotation. Currently a direct passthrough from Map box to the client app. If the client app doesn’t define the method it will return <code>.clear</code> by default.
- (UIColor * _Nonnull)mapView:(MGLMapView * _Nonnull)mapView strokeColorForShapeAnnotation:(MGLShape * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to set the fill color for the passed in polygon annotation. Currently a direct passthrough from Map box to the client app. If the client app doesn’t define the method it will return the underlying map’s <code>.tintColor</code>.
- (UIColor * _Nonnull)mapView:(MGLMapView * _Nonnull)mapView fillColorForPolygonAnnotation:(MGLPolygon * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to get the callout view for the passed in annotation. Currently a direct passthrough from Map box to the client app.
- (id <MGLCalloutView> _Nullable)mapView:(MGLMapView * _Nonnull)mapView calloutViewForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to asking if the selected annotation can show a callout. Currently a direct passthrough from Map box to the client app. If the client app doesn’t define the method it will return false.
- (BOOL)mapView:(MGLMapView * _Nonnull)mapView annotationCanShowCallout:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to signal an annotation has been tapped. Currently a direct passthrough from Map box to the client app.
- (void)mapView:(MGLMapView * _Nonnull)mapView didSelectAnnotation:(id <MGLAnnotation> _Nonnull)annotation;
/// Delegate method called before the map region starts changing in response to pan/zoom. Currently a direct passthrough from Map box to the client app.
- (void)mapView:(MGLMapView * _Nonnull)mapView regionWillChangeAnimated:(BOOL)animated;
/// Tells the delegate that the map view is entering an idle state, and no more drawing will be necessary until new data is loaded or there is some interaction with the map. Currently a direct passthrough from Map box to the client app.
- (void)mapViewDidBecomeIdle:(MGLMapView * _Nonnull)mapView;
/// Delegate method called to signal the map view needs to redraw due to a change in the viewpoint or style property transition. Currently a direct passthrough from Map box to the client app.
- (void)mapViewWillStartRenderingFrame:(MGLMapView * _Nonnull)mapView;
/// Delegate method called after the map view is redrawn due to a change in the viewpoint or style property transition. Currently a direct passthrough from Map box to the client app.
- (void)mapViewDidFinishRenderingFrame:(MGLMapView * _Nonnull)mapView fullyRendered:(BOOL)fullyRendered;
- (void)mapView:(MGLMapView * _Nonnull)mapView regionIsChangingWithReason:(MGLCameraChangeReason)reason;
/// Delegate method to signal an annotation view has been tapped. Currently a direct passthrough from Map box to the client app.
- (void)mapView:(MGLMapView * _Nonnull)mapView didSelectAnnotationView:(MGLAnnotationView * _Nonnull)annotationView;
/// Delegate method to return a Map box annotation view for the passed in annotation object. Currently a direct passthrough from Map box to the client app.
- (MGLAnnotationView * _Nullable)mapView:(MGLMapView * _Nonnull)mapView viewForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Delegate method called just after the views are added to the map. Currently a direct passthrough from Map box to the client app.
- (void)mapView:(MGLMapView * _Nonnull)mapView didAddAnnotationViews:(NSArray<MGLAnnotationView *> * _Nonnull)annotationViews;
- (nonnull instancetype)initWithFrame:(CGRect)frame styleURL:(NSURL * _Nullable)styleURL SWIFT_UNAVAILABLE;
@end


@interface PangeaMapView (SWIFT_EXTENSION(PangeaSDK))
/// \code
/// Add styling
///
/// - Parameters: 
///    - overlay: Overlay.
///    - mvtlayer: SunMVTLayer.
///
/// \endcode
- (void)addStylingWithOverlay:(DefaultOverlay * _Nonnull)overlay mvtLayer:(FDSMVTLayer * _Nonnull)mvtLayer predicate:(NSPredicate * _Nullable)predicate;
@end

@class NSProgress;

/// The entry point for downloading data for usage offline. This class allows client apps to download basemap, feature, and raster tiles and provides the ability to track progress via notifications or completion handlers.
SWIFT_CLASS("_TtC9PangeaSDK20PangeaOfflineManager")
@interface PangeaOfflineManager : NSObject
/// Request notification key, used in the <code>userInfo</code> dictionary of notifications.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestNotificationKey;)
+ (NSString * _Nonnull)requestNotificationKey SWIFT_WARN_UNUSED_RESULT;
/// Error notification key, used in the <code>userInfo</code> dictionary of notifications.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorNotificationKey;)
+ (NSString * _Nonnull)errorNotificationKey SWIFT_WARN_UNUSED_RESULT;
/// Error description key, used in the <code>userInfo</code> dictionary of the <code>Error</code> object obtained from the notification via the <code>errorNotificationKey</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDescriptionKey;)
+ (NSString * _Nonnull)errorDescriptionKey SWIFT_WARN_UNUSED_RESULT;
/// The singleton instance of this class.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PangeaOfflineManager * _Nonnull shared;)
+ (PangeaOfflineManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Loads previous requests and resumes them if they were interrupted.
- (void)initSessionWith:(PangeaConfig * _Nonnull)config SWIFT_METHOD_FAMILY(none);
/// Cancels the download of the region with the passed in <code>name</code>. This will remove any parts of it that have already been downloaded.
- (BOOL)cancelRegionDownload:(NSString * _Nonnull)name error:(NSError * _Nullable * _Nullable)error;
/// Remove downloaded <code>name</code> offline region
- (BOOL)removeOfflineRegion:(NSString * _Nonnull)name error:(NSError * _Nullable * _Nullable)error;
- (void)objc_downloadOfflineRegionWithRegionRequest:(OfflineRegionRequest * _Nonnull)regionRequest completion:(void (^ _Nonnull)(NSInteger, NSInteger, NSError * _Nullable))completion progress:(void (^ _Nonnull)(enum OfflineRegionStatus, NSInteger, NSProgress * _Nonnull))progress;
- (void)objc_downloadOfflineFeatureRegionWithRegionRequest:(OfflineRegionRequest * _Nonnull)regionRequest completion:(void (^ _Nonnull)(NSInteger, NSInteger, NSError * _Nullable))completion progress:(void (^ _Nonnull)(enum OfflineRegionStatus, NSProgress * _Nonnull))progress;
/// Return the current known offline regions with meta data bout their current state. The meta data will vary depending on the current state of the region.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSDictionary<NSString *, id> *> * _Nonnull regions;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OfflineRegionLoadedNotification;)
+ (NSNotificationName _Nonnull)OfflineRegionLoadedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OfflineRegionLoadingErrorNotification;)
+ (NSNotificationName _Nonnull)OfflineRegionLoadingErrorNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OfflineRegionStatusChangedNotification;)
+ (NSNotificationName _Nonnull)OfflineRegionStatusChangedNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSBundle;
@class NSData;

/// PangeaPalette is a class for working with color palettes in Pangea Renderer version 2 (client-side rendering). Not to be confused with palette class of the PangeaRenderer2 itself (<code>PangeaRenderer.Palette</code>)
SWIFT_CLASS("_TtC9PangeaSDK13PangeaPalette")
@interface PangeaPalette : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Initialize from the bundle JSON file
- (nonnull instancetype)initFromBundle:(NSBundle * _Nullable)fromBundle bundleJsonResource:(NSString * _Nonnull)bundleJsonResource ofType:(NSString * _Nonnull)ext bundlePath:(NSString * _Nonnull)bundlePath OBJC_DESIGNATED_INITIALIZER;
/// Initialize from the bundle JSON file
- (nonnull instancetype)initFromJsonString:(NSString * _Nonnull)fromJsonString OBJC_DESIGNATED_INITIALIZER;
/// Load color palette from the bundle resource (JSON file)
- (BOOL)loadFromBundle:(NSBundle * _Nullable)bundle bundleJsonResource:(NSString * _Nonnull)bundleJsonResource ofType:(NSString * _Nonnull)ext bundlePath:(NSString * _Nonnull)bundlePath error:(NSError * _Nullable * _Nullable)error;
/// Load color palette from a direct JSON string
- (BOOL)loadFromJsonString:(NSString * _Nonnull)jsonString error:(NSError * _Nullable * _Nullable)error;
/// Load color palette from a JSON Data
- (BOOL)loadFromJsonData:(NSData * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error;
/// Represent the color palette in form of JSON String that is suitable for use by PangeaRenderer2
- (NSString * _Nonnull)asJsonString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Error codes returned to the client app in an <code>Error</code> object in case an error occurs.
typedef SWIFT_ENUM(NSInteger, PangeaSDKErrorCode, open) {
/// Polling for the geopackage has passed the configured timeout period without receiving the package from the server.
  PangeaSDKErrorCodePangeaOfflineManagerTimeOutPollingForGeopackage = 1,
/// Pangea received a response from the server it wasn’t expecting. If you are receiving this error please verify the response from the server(using an http proxy for example).
  PangeaSDKErrorCodePangeaOfflineManagerUnexpectedResponse = 2,
/// The request didn’t work out. One possible cause here is if the geopackage to downlaod is too big.
  PangeaSDKErrorCodePangeaOfflineManagerRequestFailed = 3,
/// The attempt to write the geopackage to disk and unpack it failed due to disk issues.
  PangeaSDKErrorCodePangeaOfflineManagerDiskError = 4,
/// Return an error for any http code above 400.
  PangeaSDKErrorCodePangeaNetworkError = 5,
/// The geopackage request was rejected by the server.
  PangeaSDKErrorCodePangeaOfflineManagerRequestRejected = 6,
/// The offline request was missing products
  PangeaSDKErrorCodePangeaOfflineMissingProductsError = 7,
/// The wrong product types were specificed in the offline request.
  PangeaSDKErrorCodePangeaOfflineWrongProductTypeError = 8,
/// Offline Product info counldn’t be loaded.
  PangeaSDKErrorCodePangeaOfflineProductInfoError = 9,
/// Not all tiles were downloaded for an offline region request.
  PangeaSDKErrorCodePangeaOfflineTileDownloadError = 10,
/// Cannot open the database, create table or statement, or get data.
  PangeaSDKErrorCodePangeaSQLiteDatabaseError = 11,
/// Cannot complete operation because self in closure is invalid
  PangeaSDKErrorCodePangeaInvalidSelfInClosure = 12,
/// Cannot complete operation because Tile grid or time in closure is invalid.
  PangeaSDKErrorCodePangeaInvalidTileGridOrTimeRangeInClosure = 13,
/// Cannot complete operation because zoom level is invalid
  PangeaSDKErrorCodePangeaInvalidZoomLevel = 14,
/// Cannot complete operation because coordinate bounds is invalid
  PangeaSDKErrorCodePangeaInvalidVisibleCoordinateBounds = 15,
/// Passed to the completion handler when current time is not set before load is performed
  PangeaSDKErrorCodeLayerCurrentTimeIsNotSetError = 16,
/// <code>MapLayerDataProvider</code> related errors
/// Url builder could not built URL with given parameters.
  PangeaSDKErrorCodeMapLayerDataProviderNoURLForTileError = 17,
  PangeaSDKErrorCodeMapLayerDataProviderDownloadRequestFailedWithError = 18,
  PangeaSDKErrorCodeMapLayerDataProviderNoResponseFromDownloadRequest = 19,
  PangeaSDKErrorCodeMapLayerDataProviderDownloadOperationWasCancelled = 20,
  PangeaSDKErrorCodeMapLayerDataProviderNotValidTimestamp = 21,
  PangeaSDKErrorCodeMapLayerDataProviderCouldNotBuildMapElementFrom = 22,
  PangeaSDKErrorCodeMapLayerDataProviderNoDataFor = 23,
  PangeaSDKErrorCodeMapLayerDataProviderDataProviderError = 24,
/// <code>ProductInfoProvider</code> related errors
/// Passed to the completion handler when there is a failure to retrieve product information from the server or an error in the JSON(JSON is valid but contains nil values for products).
  PangeaSDKErrorCodeProductInfoProviderCouldntRetrieveProduct = 25,
/// Passed to the completion handler when either the returned JSON is invalid or the URL to make the call is invalid.
  PangeaSDKErrorCodeProductInfoProviderInvalidConfigurationObject = 26,
/// Passed to the completion handler when there is no key product for the given TilerProductGroup returned from the server.
  PangeaSDKErrorCodeProductInfoProviderCouldntRetrieveKeyProduct = 27,
};




SWIFT_CLASS("_TtC9PangeaSDK23ParticleSystemXMLWriter")
@interface ParticleSystemXMLWriter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC9PangeaSDK21PastPositionGenerator")
@interface PastPositionGenerator : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class defines a feature that represents a single point on a map.
SWIFT_CLASS("_TtC9PangeaSDK12PointFeature")
@interface PointFeature : DefaultFeature
/// Initializes a new PointFeature
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new PointFeature object with GeoJSON object and sets the coordinates, the properties, the type, and the properties array.
/// Returns nil if geoJson not valid.
- (nullable instancetype)initWithGeoJson:(NSDictionary<NSString *, id> * _Nonnull)geoJson featureIDKey:(NSString * _Nonnull)featureIDKey OBJC_DESIGNATED_INITIALIZER;
/// Takes in a GeoJSON object and sets the coordinates, the properties array, the type, and the properties array.
- (void)loadFromGeoJson:(NSDictionary<NSString *, id> * _Nonnull)json;
@end


/// Data class representing a polygon within a specific bounding box.
SWIFT_CLASS("_TtC9PangeaSDK7Polygon")
@interface Polygon : MultiPoint
/// Array of Polygon representing the interior polygons.
@property (nonatomic, copy) NSArray<Polygon *> * _Nonnull interiorPolygons;
/// Loosely-typed dictionary that can be used to set styling properties.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull stylingProperties;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>DefaultFeature</code> that represents a polygon on the world.
SWIFT_CLASS("_TtC9PangeaSDK14PolygonFeature")
@interface PolygonFeature : DefaultFeature
/// Holds the geographical <code>Polygon</code> object that is represented by this feature.
@property (nonatomic, strong) Polygon * _Nullable polygon;
/// An instance of the <code>InternationalDateLineAdjuster</code> that is used on rendering to show the polygon correctly across the international date line.
@property (nonatomic, strong) InternationalDateLineAdjuster * _Nonnull idlAdjuster;
/// Create a new instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new PolygonFeature object with GeoJSON object and sets the coordinates, the properties, the type, and the properties array.
/// Returns nil if geoJson not valid.
- (nullable instancetype)initWithGeoJson:(NSDictionary<NSString *, id> * _Nonnull)geoJson featureIDKey:(NSString * _Nonnull)featureIDKey OBJC_DESIGNATED_INITIALIZER;
/// Takes in a GeoJSON object and sets the coordinates, the properties, the type, and the properties array.
- (void)loadFromGeoJson:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Returns a representation of the class that is suitable for debugging.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// A class the holds the visual properties for representing a <code>Polygon</code> object.
SWIFT_CLASS("_TtC9PangeaSDK11PolygonPath")
@interface PolygonPath : Path
/// The <code>Polygon</code> object represented by the class. Defaults to an empty polygon.
@property (nonatomic, strong) Polygon * _Nonnull polygon;
/// Initializes a new PolygonPath
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) FillStyle * _Nonnull fillStyle;
@end


/// Data class representing a polyline within a specific bounding box.
SWIFT_CLASS("_TtC9PangeaSDK8Polyline")
@interface Polyline : MultiPoint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>DefaultFeature</code> that represents a line on the world.
SWIFT_CLASS("_TtC9PangeaSDK15PolylineFeature")
@interface PolylineFeature : DefaultFeature
/// Holds the geographical <code>Polyline</code> object that is represented by this feature.
@property (nonatomic, strong) Polyline * _Nullable polyline;
/// An instance of the <code>InternationalDateLineAdjuster</code> that is used on rendering to show the polygon correctly across the international date line.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) InternationalDateLineAdjuster * _Nonnull idlAdjuster;)
+ (InternationalDateLineAdjuster * _Nonnull)idlAdjuster SWIFT_WARN_UNUSED_RESULT;
+ (void)setIdlAdjuster:(InternationalDateLineAdjuster * _Nonnull)value;
/// Initializes a new instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new PolylineFeature object with GeoJSON object and sets the coordinates, the properties, the type, and the properties array.
/// Returns nil if geoJson not valid.
- (nullable instancetype)initWithGeoJson:(NSDictionary<NSString *, id> * _Nonnull)geoJson featureIDKey:(NSString * _Nonnull)featureIDKey OBJC_DESIGNATED_INITIALIZER;
/// Takes in a GeoJSON object and sets the coordinates, the properties, the type, and the properties array.
- (void)loadFromGeoJson:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Returns a representation of the class that is suitable for debugging.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// A class the holds the visual properties for representing a <code>Polyline</code> object.
SWIFT_CLASS("_TtC9PangeaSDK12PolylinePath")
@interface PolylinePath : Path
/// Initializes a new PolylinePath
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The <code>Polyline</code> object represented by the class. Defaults to an empty polyline.
@property (nonatomic, strong) Polyline * _Nonnull polyline;
@end


SWIFT_CLASS("_TtC9PangeaSDK15PositionUpdater")
@interface PositionUpdater : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ProductType, open) {
  ProductTypeRaster = 0,
  ProductTypeFeature = 1,
};


SWIFT_CLASS("_TtC9PangeaSDK12QuadRenderer")
@interface QuadRenderer : ParticleSystemObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PangeaSDK23RandomPositionGenerator")
@interface RandomPositionGenerator : ParticleSystemObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class adds the use of a <code>stencil</code> property to data providers to optinally request data
/// coverage only on land or only on water.
SWIFT_CLASS("_TtC9PangeaSDK24TilerProductDataProvider")
@interface TilerProductDataProvider : MapDataProvider
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// A stencil allows the client app to request data coverage over everything(<code>noStencil</code>), only over land(<code>overLand</code>), or only over water(<code>overWater</code>).
typedef SWIFT_ENUM(NSInteger, Stencil, open) {
/// Don’t use a stencil. This is the default.
  StencilNoStencil = 0,
/// Use an over land stencil, returning data only over land.
  StencilOverLand = 1,
/// Use an over water stencil, returning data only over water.
  StencilOverWater = 2,
};

@class RasterProductInfoProvider;

/// A <code>RasterDataProvider</code> is used to get product information and raster data from the server(or the cache) for use and display by <code>RasterTileLayer</code> instances.
SWIFT_CLASS("_TtC9PangeaSDK18RasterDataProvider")
@interface RasterDataProvider : TilerProductDataProvider
/// Creates a new instance of <code>RasterDataProvider</code> using the passed in parameters.
/// \param productKey The product key is used to acquire data for a specific product.
///
/// \param config Configuration object storing values needed to request data.
///
/// \param productInfoProvider An instance of the object used to manage retrieving the raster product information from network and cache. May be omitted, the default value is <code>shared</code> instance of the <code>RasterProductInfoProvider</code>.
///
- (nonnull instancetype)initWithProductKey:(NSString * _Nonnull)productKey config:(PangeaConfig * _Nonnull)config productInfoProvider:(RasterProductInfoProvider * _Nonnull)productInfoProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Raster product information.
SWIFT_CLASS("_TtC9PangeaSDK17RasterProductInfo")
@interface RasterProductInfo : NSObject
/// HACK! Avoid using it. Will be removed soon.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RasterProductInfo (SWIFT_EXTENSION(PangeaSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9PangeaSDK25RasterProductInfoProvider")
@interface RasterProductInfoProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RasterProductInfoProvider * _Nonnull shared;)
+ (RasterProductInfoProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Inits an <code>Offline</code> product info provider that works with cached prodcuts.
/// -note: products do not expire for such ProductInfoProvider.
- (nonnull instancetype)initWithRegionName:(NSString * _Nonnull)regionName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Raster product’s metadata.
SWIFT_CLASS("_TtC9PangeaSDK21RasterProductMetaData")
@interface RasterProductMetaData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSNotification;

/// <code>RasterTileLayer</code> is used to show raster image data on the map.
SWIFT_CLASS("_TtC9PangeaSDK15RasterTileLayer")
@interface RasterTileLayer : Layer
/// A weak reference to the <code>PangeaMapView</code> this layer is added to. This will be <code>nil</code> if the layer isn’t added to a map.
@property (nonatomic, weak) PangeaMapView * _Nullable mapView;
/// The instance of the <code>RasterDataProvider</code> that was passed in on creation of this layer. Read-only.
@property (nonatomic, readonly, strong) RasterDataProvider * _Nonnull dataProvider;
/// The current layer opacity represented by a value between <code>0.0</code> (fully transparent) and <code>1.0</code> (fully opaque). The default value is <code>1.0</code>. Setting this will reload the layer.
@property (nonatomic) CGFloat opacity;
/// The current layer time (timestamp in seconds). Setting this will reload the layer only if it results in a new tile time (if the current time has changed enough to move to a new time from the server).
@property (nonatomic) int64_t currentTime;
/// Number of tiles to hold in memory for this layer. The default value is <code>1000</code>.
@property (nonatomic) NSInteger tileCacheCapacity;
/// The product key is used to acquire data for a specific product. Value is read-only and specified in the <code>RasterDataProvider</code> that was passed in on creation of this layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull productKey;
/// Creates a new instance of <code>RasterTilerLayer</code> using the specified data provider.
/// \param dataProvider An instance of <code>RasterDataProvider</code> that is used to get product information and raster data to be displayed on this raster layer.
///
- (nonnull instancetype)init:(RasterDataProvider * _Nonnull)dataProvider OBJC_DESIGNATED_INITIALIZER;
/// Loads data from the server and shows it on the map. This is an async call that will call the completion handler with an error (if any) or with <code>nil</code> (if there were no errors when loading). If loading completes successfully, it reloads the data. If loading fails, it does not reload the data.
/// \param completionHandler The completion handler to call with the result after loading is finished. May be omitted, the default value is <code>nil</code>.
///
- (void)loadWithCompletionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
/// Fired after product info changes
- (void)productInfoDidChange:(NSNotification * _Nonnull)notification;
@end


SWIFT_CLASS("_TtC9PangeaSDK5Speed")
@interface Speed : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, Unit, open) {
  UnitMilesPerHour = 0,
  UnitKilometersPerHour = 1,
  UnitMetersPerSecond = 2,
  UnitCentimetersPerSecond = 3,
  UnitUnknown = 4,
};


SWIFT_CLASS("_TtC9PangeaSDK28StillParticlesRemovalUpdater")
@interface StillParticlesRemovalUpdater : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Stroke cap
typedef SWIFT_ENUM(NSInteger, StrokeCap, open) {
/// Butt
  StrokeCapButt = 0,
/// Round
  StrokeCapRound = 1,
/// Square
  StrokeCapSquare = 2,
};

/// Stroke join
typedef SWIFT_ENUM(NSInteger, StrokeJoin, open) {
/// Bevel
  StrokeJoinBevel = 0,
/// Round
  StrokeJoinRound = 1,
/// Miter
  StrokeJoinMiter = 2,
};

@class NSNumber;

/// Representation of the stroke style for <code>Path</code> overlay
SWIFT_CLASS("_TtC9PangeaSDK11StrokeStyle")
@interface StrokeStyle : NSObject
/// The width of the stroke for the line. Defaults to 5.0
@property (nonatomic) CGFloat strokeWidth;
/// The opacity of the stroke for the line. Defaults to 1.0
@property (nonatomic) CGFloat strokeOpacity;
/// The color of the stroke for the line. Defaults to UIColor.red
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
/// The end cap stroke of the line.
@property (nonatomic) enum StrokeCap strokeCap;
/// The join of the line.
@property (nonatomic) enum StrokeJoin strokeJoin;
/// The join limit of the line. Will only be applied if <code>strokeJoin</code> is <code>.Round</code>.
@property (nonatomic) CGFloat strokeJoinLimit;
/// The dash pattern for the stroke line.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull strokeDash;
/// The stroke color properties
@property (nonatomic, strong) StylerHelper * _Nonnull strokeColorProp;
/// Draws a line casing outside of a line’s actual path. Value indicates the width of the inner gap.
@property (nonatomic) double lineGapWidth;
/// Amount of blur to apply to the line.
@property (nonatomic) double strokeBlur;
/// Offset
@property (nonatomic) CGFloat strokeOffset;
@property (nonatomic, strong) StylerHelper * _Nonnull strokeOffsetProp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Styler constants class
SWIFT_CLASS("_TtC9PangeaSDK15StylerConstants")
@interface StylerConstants : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Icon Marker Constants
SWIFT_CLASS("_TtCC9PangeaSDK15StylerConstants19IconMarkerConstants")
@interface IconMarkerConstants : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Common constants for different shapes (circles, polylines and polygons)
SWIFT_CLASS("_TtCC9PangeaSDK15StylerConstants20CommonShapeConstants")
@interface CommonShapeConstants : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Circle Marker Constants
SWIFT_CLASS("_TtCC9PangeaSDK15StylerConstants21CircleMarkerConstants")
@interface CircleMarkerConstants : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Polygon Constants
SWIFT_CLASS("_TtCC9PangeaSDK15StylerConstants16PolygonConstants")
@interface PolygonConstants : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Styler Helper
SWIFT_CLASS("_TtC9PangeaSDK12StylerHelper")
@interface StylerHelper : NSObject
/// Data to display on map
/// Examples:
/// \code
/// let dataToDisplayMap = [1: -1.25,
///                         2: -1.25,
///                         3: -1]
///
/// let dataToDisplayMap = [
///     "SE": UIColor.red,
///     "SC": UIColor.black
/// ]
///
/// let dataToDisplayMap = [
///     ["SE", "W"]: UIColor.red,
///     ["SC", "A"]: UIColor.black
/// ]
///
/// let dataToDisplayMap = [
///     [1, 0.5]: "John",
///     [2, 6]: "Doe"
/// ]
///
/// \endcode
@property (nonatomic, copy) NSDictionary * _Nonnull dataToDisplayMap;
/// Convenience property if you perform styling on a single attribute
/// Usage:
/// \code
/// let propHelper = StylerHelper()
/// propHelper.attributeName = "inrix.frc"
/// let dataToDisplayMap = [
///    1: -1.25,
///    2: -1.25,
///    3: -1
/// ]
/// propHelper.dataToDisplayMap = dataToDisplayMap
/// propHelper.defaultValue =  0
///
/// \endcode
@property (nonatomic, copy) NSString * _Nonnull attributeName;
/// Use this property if you want to perform styling on multiple attributes in MVT layer
/// Usage:
/// \code
/// let propHelper = StylerHelper()
/// propHelper.attributeNames = ["phenomena", "significance"]
/// let dataToDisplayMap = [
///     ["SE", "W"]: UIColor.red,
///     ["SC", "A"]: UIColor.black
/// ]
/// propHelper.dataToDisplayMap = dataToDisplayMap
/// propHelper.defaultValue =  UIColor.orange
///
/// \endcode
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull attributeNames;
/// Default Value
@property (nonatomic) id _Nullable defaultValue;
/// Initializes a new StylerHelper object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK11TailUpdater")
@interface TailUpdater : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK18TemperatureUpdater")
@interface TemperatureUpdater : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This is the class that manages fetching feature data from the tessera service.
SWIFT_CLASS("_TtC9PangeaSDK26TesseraFeatureDataProvider")
@interface TesseraFeatureDataProvider : FDSDataProvider
- (nullable instancetype)initWithProductKey:(NSString * _Nonnull)productKey config:(PangeaConfig * _Nonnull)config idKey:(NSString * _Nonnull)idKey productInfoProvider:(FDSProductInfoProvider * _Nonnull)productInfoProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithProductKey:(NSString * _Nonnull)productKey config:(PangeaConfig * _Nonnull)config productInfoProvider:(FDSProductInfoProvider * _Nonnull)productInfoProvider SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC9PangeaSDK25TesseraFeatureProductInfo")
@interface TesseraFeatureProductInfo : FDSProductInfo
@end


SWIFT_CLASS("_TtC9PangeaSDK33TesseraFeatureProductInfoProvider")
@interface TesseraFeatureProductInfoProvider : FDSProductInfoProvider
- (nonnull instancetype)initWithRegionName:(NSString * _Nonnull)regionName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This is the class that manages fetching raster data from the tessera service.
SWIFT_CLASS("_TtC9PangeaSDK25TesseraRasterDataProvider")
@interface TesseraRasterDataProvider : RasterDataProvider
/// Initializes a new TesseraRasterDataProvider object.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     productKey: The product key
///   </li>
///   <li>
///     config: The configuraton object
///   </li>
/// </ul>
///
/// returns:
/// A TesseraRasterDataProvider object
- (nonnull instancetype)initWithProductKey:(NSString * _Nonnull)productKey config:(PangeaConfig * _Nonnull)config productInfoProvider:(RasterProductInfoProvider * _Nonnull)productInfoProvider OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PangeaSDK24TesseraRasterProductInfo")
@interface TesseraRasterProductInfo : RasterProductInfo
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TesseraRasterProductInfo (SWIFT_EXTENSION(PangeaSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9PangeaSDK32TesseraRasterProductInfoProvider")
@interface TesseraRasterProductInfoProvider : RasterProductInfoProvider
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Text anchor
typedef SWIFT_ENUM(NSInteger, TextAnchor, open) {
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  TextAnchorCenter = 1,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  TextAnchorLeft = 2,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  TextAnchorRight = 3,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  TextAnchorTop = 4,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  TextAnchorBottom = 5,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  TextAnchorTopLeft = 6,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  TextAnchorTopRight = 7,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  TextAnchorBottomLeft = 8,
/// Center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
  TextAnchorBottomRight = 9,
};

/// Text justify
typedef SWIFT_ENUM(NSInteger, TextJustify, open) {
/// Left, right, center
  TextJustifyLeft = 1,
/// Left, right, center
  TextJustifyRight = 2,
/// Left, right, center
  TextJustifyCenter = 3,
};


/// This class represents a point on the map where text is shown. Text can be styled using the <code>textStyle</code> property of the parent class.
SWIFT_CLASS("_TtC9PangeaSDK10TextMarker")
@interface TextMarker : Marker
/// Create a new <code>TextMarker</code> instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TextTransform : NSInteger;

/// Helper struct to hold all the text style properties with reasonable defaults.
SWIFT_CLASS("_TtC9PangeaSDK9TextStyle")
@interface TextStyle : NSObject
/// Only a specific set of fonts is currently supported, system fonts are NOT supported.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull textFontNames;
/// Size of the font for text rendering. This property is measured in points. The default is <code>16</code>.
@property (nonatomic) NSInteger textSize;
/// Text color. Takes in any <code>UIColor</code> object. The default is <code>.black</code>.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The color of the halo around the text. The default is <code>.clear</code>.
@property (nonatomic, strong) UIColor * _Nonnull textHaloColor;
/// The width of the halo around the text. The default is <code>0</code> (no halo).
@property (nonatomic) NSInteger textHaloWidth;
/// The blur of the halo around the text. The default is <code>0</code> (no blur).
@property (nonatomic) CGFloat textHaloBlur;
/// The rotation of the text in degrees. The default is <code>0</code>.
@property (nonatomic) CGFloat textRotation;
/// Text opacity. 0 to 1.0. The default is <code>1</code>.
@property (nonatomic) CGFloat textOpacity;
/// If true, text will display without their corresponding icons when the icon
/// collides with other symbols and the text does not.
@property (nonatomic) BOOL iconOptional;
/// If true, the text will be visible even if it collides with other previously
/// drawn symbols.
@property (nonatomic) BOOL textAllowsOverlap;
/// If true, other symbols can be visible even if they collide with the text.
@property (nonatomic) BOOL textIgnoresPlacement;
/// If true, icons will display without their corresponding text when the text
/// collides with other symbols and the icon does not.
@property (nonatomic) BOOL textOptional;
/// Max width of the text label. This property is measured in ems. The default is <code>10</code>.
@property (nonatomic) NSInteger maxWidth;
/// Max line height. This property is measured in ems.
@property (nonatomic) NSInteger textLineHeight;
/// By default the text will show up at the bottom of an icon marker. This property is measured in ems. The default is <code>CGVector(dx: 0, dy: 0)</code> meaning 0 ems rightward and 0 ems downward.
@property (nonatomic) CGVector textOffset;
/// Sets the text justification. The default is <code>TextJustify.center</code>.
@property (nonatomic) enum TextJustify textJustify;
/// Sets the text anchor. Note that this anchors relative to the associated icon, so a <code>TextAnchor.left</code> will show the text to the left of the icon. The default is <code>TextAnchor.center</code>.
@property (nonatomic) enum TextAnchor textAnchor;
/// Extra spacing between letters. This property is measured in ems. The default is <code>0</code>.
@property (nonatomic) double letterSpacing;
/// Transform to apply to the text (convert all to upper case, lower case, or none). The default is <code>TextTransform.none</code>
@property (nonatomic) enum TextTransform textTransform;
/// Initialization
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Text transform specifies how to capitalize text.
typedef SWIFT_ENUM(NSInteger, TextTransform, open) {
  TextTransformNone = 0,
  TextTransformUppercase = 1,
  TextTransformLowercase = 2,
};



SWIFT_CLASS("_TtC9PangeaSDK12TileMetaData")
@interface TileMetaData : NSObject
@property (nonatomic, readonly) int32_t x;
@property (nonatomic, readonly) int32_t y;
@property (nonatomic, readonly) int32_t lod;
@property (nonatomic, readonly, copy) NSString * _Nonnull time;
- (nonnull instancetype)initWithX:(int32_t)x y:(int32_t)y lod:(int32_t)lod time:(NSString * _Nonnull)time stencil:(NSString * _Nonnull)stencil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TileMetaData (SWIFT_EXTENSION(PangeaSDK))
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


@interface TileMetaData (SWIFT_EXTENSION(PangeaSDK))
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9PangeaSDK13TilerCombiner")
@interface TilerCombiner : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface TilerCombiner (SWIFT_EXTENSION(PangeaSDK))
@property (nonatomic) float speedLowerBound;
@property (nonatomic) float speedUpperBound;
@property (nonatomic) float temperatureLowerBound;
@property (nonatomic) float temperatureUpperBound;
@end

typedef SWIFT_ENUM(NSInteger, TilerCombinerError, open) {
  TilerCombinerErrorInvalidSpeed = 0,
  TilerCombinerErrorInvalidDirection = 1,
  TilerCombinerErrorInvalidTemperature = 2,
  TilerCombinerErrorInvalidU = 3,
  TilerCombinerErrorInvalidV = 4,
};
static NSString * _Nonnull const TilerCombinerErrorDomain = @"PangeaSDK.TilerCombinerError";

@class TilerProductGroup;
@class TilerProductInfoProvider;

/// This data provider class is the way to retrieve product information and data for any particle
/// animation type layers. An instance of this class should be passed to <code>TilerParticleLayer</code> on creation.
SWIFT_CLASS("_TtC9PangeaSDK17TilerDataProvider")
@interface TilerDataProvider : TilerProductDataProvider
/// Creates a new instance of <code>TilerDataProvider</code> using the passed in parameters.
/// \param productGroup An instance of <code>TilerProductGroup</code> object containing product keys needed to acquire data for specific Tiler products.
///
/// \param config Configuration object storing values needed to request data.
///
/// \param productInfoProvider An instance of the object used to manage retrieving the Tiler products information from network and cache. May be omitted, the default value is a new instance of <code>TilerProductInfoProvider</code>.
///
- (nonnull instancetype)initWithProductGroup:(TilerProductGroup * _Nonnull)productGroup config:(PangeaConfig * _Nonnull)config productInfoProvider:(TilerProductInfoProvider * _Nonnull)productInfoProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TilerDataProvider</code> using the passed in parameters.
/// \param productKey The product key is used to acquire data for a specific Tiler product.
///
/// \param config Configuration object storing values needed to request data.
///
/// \param productInfoProvider An instance of the object used to manage retrieving the Tiler product information from network and cache. May be omitted, the default value is a new instance of <code>TilerProductInfoProvider</code>.
///
- (nonnull instancetype)initWithProductKey:(NSString * _Nonnull)productKey config:(PangeaConfig * _Nonnull)config productInfoProvider:(TilerProductInfoProvider * _Nonnull)productInfoProvider;
/// Creates a new instance of <code>TilerDataProvider</code> using the passed in parameters.
/// \param productKeys An array of product keys that are used to acquire data for specific Tiler products.
///
/// \param config Configuration object storing values needed to request data.
///
/// \param productInfoProvider An instance of the object used to manage retrieving the Tiler products information from network and cache. May be omitted, the default value is a new instance of <code>TilerProductInfoProvider</code>.
///
- (nonnull instancetype)initWithProductKeys:(NSArray<NSString *> * _Nonnull)productKeys config:(PangeaConfig * _Nonnull)config productInfoProvider:(TilerProductInfoProvider * _Nonnull)productInfoProvider;
@end


/// <code>TilerParticleLayer</code> is used to show animated particles data on the map.
SWIFT_CLASS("_TtC9PangeaSDK18TilerParticleLayer")
@interface TilerParticleLayer : Layer
/// The current layer time (timestamp in seconds). Setting this will reload the layer only if the new value differs from the old one.
@property (nonatomic) int64_t currentTime;
/// Tile size for this layer. The default is <code>TilerProductMetaData.defaultTileHeight</code>.
@property (nonatomic) double tileSize;
/// A weak reference to the <code>PangeaMapView</code> instance this layer is added to. This will be <code>nil</code> if the layer isn’t added to a map.
@property (nonatomic, weak) PangeaMapView * _Nullable mapView;
/// The current layer opacity represented by a value between <code>0.0</code> (fully transparent) and <code>1.0</code> (fully opaque). The default is <code>1.0</code>.
@property (nonatomic) CGFloat opacity;
/// The current instance of <code>TilerDataProvider</code> this layer is using. Value is read-only and passed in on the creation of the layer.
@property (nonatomic, readonly, strong) TilerDataProvider * _Nonnull tilerDataProvider;
/// Defines the clipping region for this layer. A clipping region is a <code>GeoBoundingBox</code> that will be the only area where particles will be displayed on the map.
@property (nonatomic, strong) GeoBoundingBox * _Nullable clippingRegion;
/// Minimum size of the region to generate particles in.
@property (nonatomic) CGSize extent;
/// Physical property of particle, describe resistance to any change in its velocity. Value should be in range <code>0...1</code>. The default is <code>0.75</code>.
@property (nonatomic) float particleInertia SWIFT_DEPRECATED_MSG("particleInertia does not have any effect and will be removed soon");
/// Length of track of particle. The default is <code>100.0</code>.
@property (nonatomic) float particleTailLength;
/// The coefficient of elasticity of the spring. Value is in the range <code>0...1</code>. The default is <code>0.5</code>.
@property (nonatomic) float particleTailSpringConstant;
/// Show or hide the particles. Default is <code>true</code>.
@property (nonatomic) BOOL showParticles;
/// The max amount of time a given particle stay alive on the screen (in seconds). The default is <code>10.0</code>.
@property (nonatomic) float maxDuration;
/// The product key is the unique identifier used to acquire data for a specific product. Value is read-only and specified in the <code>TilerDataProvider</code> that was passed in on creation of this layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull productKey;
/// The UIImage to use as a sprite for the particles.
@property (nonatomic, strong) UIImage * _Nonnull spriteImage;
/// The palette image to use for use to translate values into colors.
@property (nonatomic, strong) UIImage * _Nonnull colorPaletteImage;
/// The UIColor to use for particles displayed on the map. The default is transparent black
@property (nonatomic, strong) UIColor * _Nonnull particleColor;
/// Mixing ratio for a color with a color from another source, such as a palette
@property (nonatomic, strong) UIColor * _Nonnull colorWeight;
/// Indicates what to use for painting particles.
/// <em>Options</em>
/// <ul>
///   <li>
///     <code>.temperature</code>
///   </li>
///   <li>
///     <code>.speed</code>
///   </li>
///   <li>
///     <code>.progress</code>
///   </li>
///   <li>
///     <code>.none</code>
///   </li>
/// </ul>
/// The default is <code>.temperature</code>.
@property (nonatomic) PRColorSource colorSource;
/// The maximum number of particles to show on the map at once. The default is <code>5000</code>.
@property (nonatomic) NSInteger maxParticles;
/// The rate at which particles are created. The default is <code>500.00002</code>.
@property (nonatomic) float emissionRate;
/// Creates a new instance of <code>TilerParticleLayer</code> using the specified data provider.
/// \param dataProvider An instance of <code>TilerDataProvider</code> that is used to get product information and particle data to be displayed on this layer.
///
/// \param xmlWriter An instance of <code>ParticleSystemXMLWriter</code> that is used to configure attributes of particles. May be omitted, the default value is <code>nil</code> (the default particle system is used in this case).
///
- (nonnull instancetype)initWithDataProvider:(TilerDataProvider * _Nonnull)dataProvider xmlWriter:(ParticleSystemXMLWriter * _Nullable)xmlWriter OBJC_DESIGNATED_INITIALIZER;
/// The unique layer identifier. Value is read-only.
@property (nonatomic, readonly, copy) NSString * _Nonnull layerID;
/// Loads data from the server and shows it on the map. This is an async call that will call the completion handler with an error (if any) or with <code>nil</code> (if there were no errors when loading). If loading completes successfully, it reloads the data. If loading fails, it does not reload the data.
/// \param completionHandler The completion handler to call with the result after loading is finished. May be omitted, the default value is <code>nil</code>.
///
- (void)loadWithCompletionHandler:(void (^ _Nullable)(NSError * _Nullable))completionHandler;
/// Reloads the layer data. This can be called in response to panning/zooming. Unlike the <code>load(completionHandler:)</code> method this will not update product information.
- (void)reloadData;
/// Sets the particle duration scale factor to update progress on each updater tick.
- (void)setDurationScale:(float)scaleFactor;
/// How fast to fade in a particle after it’s been created.
- (void)setFadeInStart:(float)start stop:(float)stop;
/// How fast to fade out a particle for it to be removed.
- (void)setFadeOutStart:(float)start stop:(float)stop;
@end



/// A helper struct that can be used when creating a <code>TilerDataProvider</code> instance to pass in the product keys
/// needed to access Tiler particle products. The type of constructor to use depends on what product is being accessed.
SWIFT_CLASS("_TtC9PangeaSDK17TilerProductGroup")
@interface TilerProductGroup : NSObject
/// Creates a new <code>TilerProductGroup</code> instance using <code>speedKey</code>, <code>directionKey</code>, and an optional <code>colorProductKey</code> and <code>z</code>. <code>colorProductKey</code> refers to what product to use to color the sprites on the screen and defaults to <code>nil</code> if unspecified, <code>z</code> defaults to 0.
- (nonnull instancetype)initWithSpeedKey:(NSString * _Nonnull)speedKey directionKey:(NSString * _Nonnull)directionKey colorProductKey:(NSString * _Nullable)colorProductKey z:(NSInteger)z OBJC_DESIGNATED_INITIALIZER;
/// Creates a new <code>TilerProductGroup</code> instance using <code>uKey</code>, <code>vKey</code>, and an optional <code>colorProductKey</code> and <code>z</code>. <code>colorProductKey</code> refers to what product to use to color the sprites on the screen and  defaults to <code>nil</code> if unspecified, <code>z</code> defaults to 0.
- (nonnull instancetype)initWithUKey:(NSString * _Nonnull)uKey vKey:(NSString * _Nonnull)vKey colorProductKey:(NSString * _Nullable)colorProductKey z:(NSInteger)z OBJC_DESIGNATED_INITIALIZER;
/// Creates a new <code>TilerProductGroup</code> instance using a generic product key.
- (nonnull instancetype)initWithProductKey:(NSString * _Nonnull)productKey;
/// Creates a new <code>TilerProductGroup</code> instance using a generic array of product keys.
- (nonnull instancetype)initWithProductKeys:(NSArray<NSString *> * _Nonnull)productKeys OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Tiler product information.
SWIFT_CLASS("_TtC9PangeaSDK16TilerProductInfo")
@interface TilerProductInfo : NSObject
/// Creates a new <code>TilerProductInfo</code> instance with empty member variables.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface TilerProductInfo (SWIFT_EXTENSION(PangeaSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9PangeaSDK24TilerProductInfoProvider")
@interface TilerProductInfoProvider : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Particle product’s metadata.
SWIFT_CLASS("_TtC9PangeaSDK20TilerProductMetaData")
@interface TilerProductMetaData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS("_TtC9PangeaSDK15VelocityUpdater")
@interface VelocityUpdater : ParticleSystemObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
